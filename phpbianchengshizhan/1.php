<?php
/**
 * Created by PhpStorm.
 * User: zhangyue
 * Date: 2016/12/5
 * Time: 上午10:36
 */
//类
class Point{
    public $x;
    public $y;
    function __construct($x,$y)
    {
        $this->x = $x;
        $this->y = $y;
    }
    function get_x(){
        return $this->x;
    }
    function get_y(){
        return $this->y;
    }
    function dist($p){
        return sqrt(pow($this->x-$p->get_x(),2)+pow($this->y-$p->get_y(),2));
    }
}

$p1 = new Point(2,3);
$p2 = new Point(3,4);
echo $p1->dist($p2),"\n";
$p2->x = 5;
echo $p1->dist($p2),"\n";

//继承和重载
//class employee{
//    protected $ename;
//    protected $sal;
//    function __construct($ename,$sal=100)
//    {
//        $this->ename = $ename;
//        $this->sal = $sal;
//    }
//    function give_raise($amount){
//        $this->sal+=$amount;
//        printf("Employee %s got raise of %d dollars\n",$this->ename,$amount);
//        printf("New salary is %d dollars\n",$this->sal);
//    }
//    function __destruct()
//    {
//        // TODO: Implement __destruct() method.
//        printf("Good bye,cruel world:EMPLOYEE:%s\n",$this->ename);
//    }
//}
//class manager extends employee {
//    protected $dept;
//    function __construct($ename, $sal,$dept)
//    {
//        parent::__construct($ename, $sal);
//        $this->dept = $dept;
//    }
//    function give_raise($amount)
//    {
//        parent::give_raise($amount); // TODO: Change the autogenerated stub
//        print "This employee is a manager\n";
//    }
//    function __destruct()
//    {
//        printf("Good bye.cruel world:MANAGER:%s\n",$this->ename);
//        parent::__destruct();
//    }
//}
//自动加载
function __autoload($class){
    require_once "ACME$class.php";
}

$mgr = new manager("Smith",300,20);
$mgr->give_raise(50);
$emp = new employee("Johnson",100);
$emp->give_raise(50);

$heap = new SplMinHeap();
$heap->insert('Peter');
$heap->insert('Adam');
$heap->insert('Mladen');
foreach($heap as $h){
    print "$h\n";
}

//__set、__get、__isset
class test1{
    protected $members = array();
    public function __get($arg){
        if(array_key_exists($arg,$this->members)){
            return $this->members[$arg];
        }else{
            return "No suck luck!\n";
        }
    }
    public function __set($key,$val){
        $this->members[$key] = $val;
    }
    public function __isset($name)
    {
        // TODO: Implement __isset() method.
        return isset($this->members[$name]);
    }
}

$x = new test1();
print $x->speed_limit;
$x->speed_limit = "65 MPH\n";
if(isset($x->speed_limit)){
    printf("Speed limit is set to %s\n",$x->speed_limit);
}
$x->speed_limit = NULL;
if(empty($x->speed_limit)){
    print "The method __isset() was called.\n";
}else{
    print "The __isset() method wasn't called.\n";
}

//__call,__toString
class test2{
    function __call($name,$argv){
        print "name:$name\n";
        foreach($argv as $a){
            print "\t$a\n";
        }
    }
    function __toString()
    {
        // TODO: Implement __toString() method.
        return "test2 member.";
    }
}
$x = new test2();
$x->non_existing_method(1,2,3);
print $x;
//__clone
class test3a{
    protected $memb;
    protected $copies;

    function __construct($memb,$copies=0)
    {
        $this->memb = $memb;
        $this->copies = $copies;
    }

    function __destruct()
    {
        // TODO: Implement __destruct() method.
        printf("Destroying object %s...\n",$this->memb);
    }
    function __clone()
    {
        // TODO: Implement __clone() method.
        $this->memb.=":CLONE";
        $this->copies++;
    }
    function get_copies(){
        printf("Object %s has %d coipies.\n",$this->memb,$this->copies);
    }
}
$x = new test3a("object 1");
$x->get_copies();
$y = new test3a("object 2");
$x = clone $y;
$x->get_copies();
$y->get_copies();
print "End of the script,executing destructor(s).\n";

//迭代器
class iter implements iterator{
    private $items;
    private $index = 0;
    function __construct(array $items)
    {
        $this->items = $items;
    }

    public function current()
    {
        // TODO: Implement current() method.
        return $this->items[$this->index];
    }

    public function next()
    {
        // TODO: Implement next() method.
        $this->index++;
        if(isset($this->items[$this->index])){
            return $this->items[$this->index];
        }else{
            return NULL;
        }
    }

    public function key()
    {
        // TODO: Implement key() method.
        return $this->index;
    }

    public function valid()
    {
        // TODO: Implement valid() method.
        return isset($this->items[$this->index]);
    }

    public function rewind()
    {
        // TODO: Implement rewind() method.
        $this->index = 0;
    }
}
$x = new iter(range('a','d'));
foreach($x as $key=>$val){
    print "key=$key\tvalue=$val\n";
}

//读取文件
class file_iter implements iterator{
    private $fp;
    private $index = 0;
    private $line;
    function __construct($name)
    {
        $fp = fopen($name,'r');
        if(!$fp){
            die("Cannot open $name for reading.\n");
        }
        $this->fp = $fp;
        $this->line = rtrim(fgets($this->fp),"\n");
    }

    public function current()
    {
        // TODO: Implement current() method.
        return $this->line;
    }

    public function next()
    {
        // TODO: Implement next() method.
        $this->index++;
        $this->line = rtrim(fgets($this->fp),"\n");
        if(!feof($this->fp)){
            return $this->line;
        }else{
            return NULL;
        }
    }

    public function key()
    {
        // TODO: Implement key() method.
        return $this->index;
    }

    public function valid()
    {
        // TODO: Implement valid() method.
        return feof($this->fp)?FALSE:TRUE;
    }

    public function rewind()
    {
        // TODO: Implement rewind() method.
        $this->index = 0;
        rewind($this->fp);
        $this->line = rtrim(fgets($this->fp),"\n");
    }
}
$x = new file_iter('qbf.txt');
foreach ($x as $key=>$value){
    print "$key:\t$value\n";
}

$x = new SplFileObject('qbf.txt','r');
foreach ($x as $key=>$value){
    if(!empty($value)) print "$key:\t$value\n";
}





